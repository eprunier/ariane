(ns ariane.rss
  "Namespace for parsing RSS feeds."
  (:require [clojure.zip :as zip]
            [clojure.data.zip.xml :as zip-xml]))

(defn- add-map-entry
  "Add key/value entry to map only if value is not nil."
  [to [key value]]
  (if (and value
           (not-empty value))
    (assoc to key value)
    to))

(defn- links
  [links]
  (vec (for [link links]
         (let [link-spec {:href 
                          (first (zip-xml/xml-> link zip-xml/text))}]
           (if-let [rel (first (zip-xml/xml-> link (zip-xml/attr :rel)))]
             (assoc link-spec :rel rel)
             link-spec)))))

(defn- infos
  [root]
  (-> {}
      (add-map-entry [:title (first (zip-xml/xml-> root :title zip-xml/text))])
      (add-map-entry [:description (first (zip-xml/xml-> root :description zip-xml/text))])
      (add-map-entry [:updated (first (zip-xml/xml-> root :lastBuildDate zip-xml/text))])
      (add-map-entry [:links (links (zip-xml/xml-> root :link))])))

(defn- authors
  [authors]
  (vec (for [author authors]
         {:name (first (zip-xml/xml-> author :name zip-xml/text))
          :uri (first (zip-xml/xml-> author :uri zip-xml/text))})))

(defn- entries 
  [root]
  (for [entry (zip-xml/xml-> root :item)]
    (-> {}
        (add-map-entry [:id (first (zip-xml/xml-> entry :guid zip-xml/text))])
        (add-map-entry [:title (first (zip-xml/xml-> entry :title zip-xml/text))])
        (add-map-entry [:links (links (zip-xml/xml-> entry :link))])
        (add-map-entry [:updated (first (zip-xml/xml-> entry :pubDate zip-xml/text))])
        (add-map-entry [:authors (authors (zip-xml/xml-> entry :author))])
        (add-map-entry [:description 
                        {:content (first (zip-xml/xml-> entry :description zip-xml/text))}]))))

(defn parse-rss
  "Parse Atom feed generated by ariane.core/parse. "
  [feed]
  (let [root (zip/xml-zip feed)
        channel (first (zip-xml/xml-> root :channel))]
    {:infos (infos channel) 
     :entries (entries channel)}))
